@page "/datagrid-performance"
@using System.Linq.Dynamic.Core

@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inherits DbContextPage

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    DataGrid
</RadzenText>
<RadzenText TextStyle="TextStyle.Body1" Class="my-4">
    DataGrid paging, sorting and filtering through large Entity Framework query.
</RadzenText>

<RadzenExample Name="DataGridPerformance" Heading="false" Documentation="false">
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" 
        AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
        IsLoading=@isLoading Count="@count" Data="@data" LoadData="@LoadData" TItem="OrderAndDetail" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenImage Path="@data.Photo" class="rz-gravatar" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="FirstName" Title="First Name" Frozen="true" Width="160px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="LastName" Title="Last Name" Width="160px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="Title" Title="Job Title" Width="200px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="TitleOfCourtesy" Title="Title" Width="120px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="OrderID" Title="OrderID" Width="160px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="ProductID" Title="ProductID" Width="160px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="UnitPrice" Title="UnitPrice" Width="160px" FormatString="{0:C}" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="Quantity" Title="Quantity" Width="160px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="Discount" Title="Discount" Width="160px" FormatString="{0:P}" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="CustomerID" Title="CustomerID" Width="160px" />
            <RadzenDataGridColumn TItem="OrderAndDetail" Property="OrderDate" Title="OrderDate" Width="160px" FormatString="{0:d}" />
        </Columns>
    </RadzenDataGrid>
</RadzenExample>
@code {
    IEnumerable<OrderAndDetail> data;

    bool isLoading = false;
    int count;

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var query = from o in dbContext.Orders
                    from od in dbContext.OrderDetails
                    from e in dbContext.Employees
                    select new OrderAndDetail()
                        {
                            OrderID = od.OrderID,
                            ProductID = od.ProductID,
                            UnitPrice = od.UnitPrice,
                            Quantity = od.Quantity,
                            Discount = od.Discount,
                            CustomerID = o.CustomerID,
                            OrderDate = o.OrderDate,
                            EmployeeID = o.EmployeeID,
                            Photo = e.Photo,
                            FirstName = e.FirstName,
                            LastName = e.LastName,
                            Title = e.Title,
                            TitleOfCourtesy = e.TitleOfCourtesy
                        };

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        data = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }

    public class OrderAndDetail
    {
        public int OrderID { get; set; }
        public int ProductID { get; set; }
        public double? UnitPrice { get; set; }
        public Int16? Quantity { get; set; }
        public float? Discount { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public int? EmployeeID { get; set; }
        public string Photo { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Title { get; set; }
        public string TitleOfCourtesy { get; set; }
    }
}